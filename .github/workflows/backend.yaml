name: Deploy_AWS_backend
 
on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Incase pipeline fails kindly please destroy the resources and start from fresh'
        required: true
        default: apply
        type: choice
        options:
        - apply
        - destroy
      aws_account:
        description: 'AWS Accounts'
        required: true
        type: choice
        options:
        - dev1
        - dev
      s3_bucket:
        description: 'S3 Bucket for backend Terraform State'
        required: true
        default: "ec2-glue-athena-test"
      # s3_bucket_key:
      #   description: 'S3 Bucket key for backend Terraform State'
      #   required: true
      #   default: tfstate
      dynamodb:
        description: 'dynamodb for backend Terraform State'
        required: true
        default: "statelock-tf"
      aws_region:
        description: 'Provide the region where you want to create the vpc'
        required: true
        default: "us-east-1"
      vpc_name:
        description: 'Provide the vpc name>'
        required: true
        default: "hari_network"
      vpc_cidr:
        description: 'Provide the vpc cidr'
        required: true
        default: "10.1.0.0/16"
      pub_subnet_cidr:
        description: 'Please provide your pub subnet_cidr in this format xyz,abc'
        required: true
        default: "10.1.3.0/24,10.1.4.0/24"
      pri_subnet_cidr:
        description: 'Please provide your pri subnet_cidr in this format xyz,abc'
        required: true
        default: "10.1.1.0/24,10.1.2.0/24"
      EIP:
        description: 'Provide the bool value if you require to create the EIP and NAT Gateway'
        required: true
        default: false
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.aws_account }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.2'

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}
 
      - name: Create .tfvars file
        working-directory: /home/runner/work/tf_actions/tf_actions
        run: |
          rm -rf ./terraform.tfvars && pwd
          echo "vpc_name  = \"${{ github.event.inputs.vpc_name }}\"" > ./terraform.tfvars
          echo "vpc_cidr = \"${{ github.event.inputs.vpc_cidr }}\"" >> ./terraform.tfvars
          IFS=',' read -ra PUB_SUBNETS <<< "${{ github.event.inputs.pub_subnet_cidr }}"
          echo "pub_subnet_cidr = [$(printf '\"%s\",' "${PUB_SUBNETS[@]}" | sed 's/,$//')]" >> terraform.tfvars
          IFS=',' read -ra PRI_SUBNETS <<< "${{ github.event.inputs.pri_subnet_cidr }}"
          echo "pri_subnet_cidr = [$(printf '\"%s\",' "${PRI_SUBNETS[@]}" | sed 's/,$//')]" >> terraform.tfvars
          echo "EIP = \"${{ github.event.inputs.EIP }}\"" >> ./terraform.tfvars
          echo "aws_region = \"${{ github.event.inputs.aws_region }}\"" >> ./terraform.tfvars
          cat ./terraform.tfvars
      
      - name: Create backend.conf file
        working-directory: /home/runner/work/tf_actions/tf_actions
        run: |
          rm -rf ./backend.tfvars && pwd
          echo "key  = \"${{ github.event.inputs.s3_bucket }}\"" > ./backend.tfvars
          echo "bucket  = \"${{ github.event.inputs.s3_bucket }}\"" > ./backend.tfvars
          echo "key = \"tf-state\"" >> ./backend.tfvars
          echo "region = \"${{ github.event.inputs.aws_region }}\"" >> ./backend.tfvars
          echo "dynamodb_table = \"${{ github.event.inputs.dynamodb }}\"" >> ./backend.tfvars
          cat ./backend.tfvars
  
  
      - name: Terraform Destroy
        working-directory: /home/runner/work/tf_actions/tf_actions
        if: ${{ github.event.inputs.terraform_action }} == 'destroy'
        run: terraform destroy -auto-approve
      - name: Terraform Init
        working-directory: /home/runner/work/tf_actions/tf_actions
        if: ${{ github.event.inputs.terraform_action }} == 'apply'
        run: | 
          terraform init -backend-config=./backend.tfvars
      - name: Terraform Validate
        working-directory: /home/runner/work/tf_actions/tf_actions
        if: ${{ github.event.inputs.terraform_action }} == 'apply'
        run: terraform validate
      - name: Terraform Plan
        working-directory: /home/runner/work/tf_actions/tf_actions
        if: ${{ github.event.inputs.terraform_action }} == 'apply'
        run: terraform plan
      - name: Terraform Apply
        working-directory: /home/runner/work/tf_actions/tf_actions
        if: ${{ github.event.inputs.terraform_action }} == 'apply'
        run: terraform apply -auto-approve

 